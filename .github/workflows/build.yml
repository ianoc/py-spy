name: Build

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: pre-commit/action@v3.0.0

  build:
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Install Dependencies
        run: sudo apt install libunwind-dev
        if: runner.os == 'Linux'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Build
        run: cargo build --release --verbose --examples
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Test
        id: test
        continue-on-error: true
        run: cargo test --release
      - name: Test (retry#1)
        id: test1
        run: cargo test --release
        if: steps.test.outcome=='failure'
        continue-on-error: true
      - name: Test (retry#2)
        run: cargo test --release
        if: steps.test1.outcome=='failure'
      - name: Build Wheel
        run: |
          pip install --upgrade maturin
          maturin build --release -o dist --all-features
        if: runner.os == 'Windows'
      - name: Build Wheel - universal2
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
          MACOSX_DEPLOYMENT_TARGET: 10.9
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          pip install --upgrade maturin
          maturin build --release -o dist
          maturin build --release -o dist --target universal2-apple-darwin
        if: matrix.os == 'macos-latest'
      - name: Rename Wheels
        run: |
          python3 -c "import shutil; import glob; wheels = glob.glob('dist/*.whl'); [shutil.move(wheel, wheel.replace('py3', 'py2.py3')) for wheel in wheels if 'py2' not in wheel]"
        if: runner.os != 'Linux'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
        if: runner.os != 'Linux'

  build-linux-cross:
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            i686-unknown-linux-musl,
            armv7-unknown-linux-musleabihf,
            aarch64-unknown-linux-musl,
            x86_64-unknown-linux-musl,
          ]
    container:
      image: ghcr.io/benfred/rust-musl-cross:${{ matrix.target }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
      - name: Build
        run: |
          python3 -m pip install --upgrade maturin
          maturin build --release -o dist --target ${{ matrix.target }} --features unwind
          maturin sdist -o dist
        if: matrix.target == 'x86_64-unknown-linux-musl'
      - name: Build
        run: |
          python3 -m pip install --upgrade maturin
          maturin build --release -o dist --target ${{ matrix.target }}
          maturin sdist -o dist
        if: matrix.target != 'x86_64-unknown-linux-musl'
      - name: Rename Wheels
        run: |
          python3 -c "import shutil; import glob; wheels = glob.glob('dist/*.whl'); [shutil.move(wheel, wheel.replace('py3', 'py2.py3')) for wheel in wheels if 'py2' not in wheel]"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
